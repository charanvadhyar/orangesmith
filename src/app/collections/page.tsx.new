'use client'

import { useState, useEffect } from 'react'
import Image from 'next/image'
import Link from 'next/link'
import { client } from '@/sanity/client'
import { urlForImage } from '@/sanity/client'

// Types for products and collections
interface Product {
  _id: string
  name: string
  slug: {
    current: string
  }
  images: any[]
  price: number
  comparePrice?: number
  categories?: any[]
  collections?: any[]
  materials?: any[]
  gemstones?: any[]
  isNew?: boolean
  isBestseller?: boolean
}

interface Collection {
  _id: string
  title: string
  slug: {
    current: string
  }
}

interface Category {
  _id: string
  name: string
  slug: {
    current: string
  }
}

interface Material {
  _id: string
  name: string
  slug: {
    current: string
  }
}

interface Gemstone {
  _id: string
  name: string
  slug: {
    current: string
  }
}

// Filter and sorting options
const sortOptions = [
  { name: 'Newest', value: 'newest' },
  { name: 'Price: Low to High', value: 'price-asc' },
  { name: 'Price: High to Low', value: 'price-desc' },
  { name: 'Name: A-Z', value: 'name-asc' },
]

// CSS to hide scrollbar for filters
const hideScrollbarCSS = `
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
`;

export default function CollectionsPage() {
  const [products, setProducts] = useState<Product[]>([])
  const [collections, setCollections] = useState<Collection[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [materials, setMaterials] = useState<Material[]>([])
  const [gemstones, setGemstones] = useState<Gemstone[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [activeCollection, setActiveCollection] = useState<string | null>(null)
  const [activeCategory, setActiveCategory] = useState<string | null>(null)
  const [activeMaterial, setActiveMaterial] = useState<string | null>(null)
  const [activeGemstone, setActiveGemstone] = useState<string | null>(null)
  const [sortBy, setSortBy] = useState('newest')
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 10000])
  const [priceMin, setPriceMin] = useState<number>(0)
  const [priceMax, setPriceMax] = useState<number>(10000)

  // Fetch products and filtering options
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true)
        
        // Fetch all collections
        const collectionsData = await client.fetch(`
          *[_type == "collection"] {
            _id,
            title,
            slug
          }
        `)
        
        // Fetch all categories
        const categoriesData = await client.fetch(`
          *[_type == "jewelryCategory"] {
            _id,
            name,
            slug
          }
        `)

        // Fetch all materials (metals like gold, silver, etc.)
        const materialsData = await client.fetch(`
          *[_type == "material"] {
            _id,
            name,
            slug
          }
        `)
        
        // Fetch all gemstones (diamonds, sapphires, etc.)
        const gemstonesData = await client.fetch(`
          *[_type == "gemstone"] {
            _id,
            name,
            slug
          }
        `)
        
        // Build query for products with filters
        let productsQuery = `*[_type == "product"`
        
        // Apply collection filter if selected
        if (activeCollection) {
          productsQuery += ` && references("${activeCollection}")`
        }
        
        // Apply category filter if selected
        if (activeCategory) {
          productsQuery += ` && references("${activeCategory}")`
        }
        
        // Apply material filter if selected
        if (activeMaterial) {
          productsQuery += ` && references("${activeMaterial}")`
        }
        
        // Apply gemstone filter if selected
        if (activeGemstone) {
          productsQuery += ` && references("${activeGemstone}")`
        }
        
        // Close the query and select fields
        productsQuery += `] {
          _id,
          name,
          slug,
          images,
          price,
          comparePrice,
          categories[]->{_id, name, slug},
          collections[]->{_id, title, slug},
          materials[]->{_id, name, slug},
          gemstones[]->{_id, name, slug},
          isNew,
          isBestseller
        }`
        
        let fetchedProducts = await client.fetch(productsQuery)
        
        // Apply price range filter
        fetchedProducts = fetchedProducts.filter((product: Product) => 
          product.price >= priceRange[0] && product.price <= priceRange[1]
        )
        
        // Apply sorting
        switch (sortBy) {
          case 'price-asc':
            fetchedProducts = fetchedProducts.sort((a: Product, b: Product) => a.price - b.price)
            break
          case 'price-desc':
            fetchedProducts = fetchedProducts.sort((a: Product, b: Product) => b.price - a.price)
            break
          case 'name-asc':
            fetchedProducts = fetchedProducts.sort((a: Product, b: Product) => 
              a.name.localeCompare(b.name))
            break
          case 'newest':
          default:
            // Newest is default from Sanity
            break
        }
        
        setCollections(collectionsData)
        setCategories(categoriesData)
        setMaterials(materialsData)
        setGemstones(gemstonesData)
        setProducts(fetchedProducts)
      } catch (error) {
        console.error('Error fetching data:', error)
      } finally {
        setIsLoading(false)
      }
    }
    
    fetchData()
  }, [activeCollection, activeCategory, activeMaterial, activeGemstone, priceRange, sortBy])

  // For display
  const displayProducts = products

  return (
    <div className="min-h-screen">
      {/* Page Header */}
      <div className="bg-gray-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-display font-medium text-jetBlack mb-2">
            Our Collections
          </h1>
          <p className="text-lg text-slateGray max-w-2xl mx-auto">
            Discover our exclusive jewelry collections, crafted with precision and passion for those who appreciate timeless elegance.
          </p>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-8 lg:py-16">
        {/* Horizontal filters */}
        <div className="mb-12">
          {/* Filter tabs */}
          <div className="border-b border-gray-200 mb-8">
            <div className="flex overflow-x-auto hide-scrollbar pb-1 gap-8 justify-center">
              {/* Collection filter dropdown */}
              <div className="relative min-w-fit">
                <select
                  value={activeCollection || ''}
                  onChange={(e) => setActiveCollection(e.target.value || null)}
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors"
                >
                  <option value="">All Collections</option>
                  {collections.map((collection) => (
                    <option key={collection._id} value={collection._id}>
                      {collection.title}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>

              {/* Category filter dropdown */}
              <div className="relative min-w-fit">
                <select
                  value={activeCategory || ''}
                  onChange={(e) => setActiveCategory(e.target.value || null)}
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors"
                >
                  <option value="">All Categories</option>
                  {categories.map((category) => (
                    <option key={category._id} value={category._id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>

              {/* Material filter dropdown */}
              <div className="relative min-w-fit">
                <select
                  value={activeMaterial || ''}
                  onChange={(e) => setActiveMaterial(e.target.value || null)}
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors"
                >
                  <option value="">All Materials</option>
                  {materials.map((material) => (
                    <option key={material._id} value={material._id}>
                      {material.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>

              {/* Gemstone filter dropdown */}
              <div className="relative min-w-fit">
                <select
                  value={activeGemstone || ''}
                  onChange={(e) => setActiveGemstone(e.target.value || null)}
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors"
                >
                  <option value="">All Gemstones</option>
                  {gemstones.map((gemstone) => (
                    <option key={gemstone._id} value={gemstone._id}>
                      {gemstone.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>

              {/* Price range dropdown */}
              <div className="relative min-w-fit">
                <button 
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors flex items-center"
                  onClick={() => {
                    const dialog = document.getElementById('price-dialog');
                    if (dialog) dialog.showModal();
                  }}
                >
                  Price Range
                </button>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>

                {/* Price dialog */}
                <dialog id="price-dialog" className="p-6 rounded shadow-xl max-w-xs w-full">
                  <h3 className="text-lg font-medium mb-4">Set Price Range</h3>
                  <div className="space-y-4">
                    <div className="flex flex-col space-y-2">
                      <label htmlFor="min-price" className="text-sm text-gray-600">Minimum Price</label>
                      <input
                        type="number"
                        id="min-price"
                        value={priceMin}
                        onChange={(e) => setPriceMin(Number(e.target.value))}
                        className="w-full border border-gray-300 px-3 py-2 rounded"
                      />
                    </div>
                    <div className="flex flex-col space-y-2">
                      <label htmlFor="max-price" className="text-sm text-gray-600">Maximum Price</label>
                      <input
                        type="number"
                        id="max-price"
                        value={priceMax}
                        onChange={(e) => setPriceMax(Number(e.target.value))}
                        className="w-full border border-gray-300 px-3 py-2 rounded"
                      />
                    </div>
                    <div className="flex space-x-2 pt-2">
                      <button
                        className="flex-1 bg-gray-200 text-gray-800 py-2 rounded hover:bg-gray-300 transition-colors"
                        onClick={() => {
                          const dialog = document.getElementById('price-dialog');
                          if (dialog) dialog.close();
                        }}
                      >
                        Cancel
                      </button>
                      <button
                        className="flex-1 bg-jetBlack text-white py-2 rounded hover:bg-opacity-80 transition-colors"
                        onClick={() => {
                          setPriceRange([priceMin, priceMax]);
                          const dialog = document.getElementById('price-dialog');
                          if (dialog) dialog.close();
                        }}
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </dialog>
              </div>
              
              {/* Sort By dropdown */}
              <div className="relative min-w-fit">
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="appearance-none w-full bg-white border-b-2 border-gray-100 hover:border-vividOrange py-2 pr-8 pl-2 rounded-none cursor-pointer focus:outline-none focus:border-vividOrange transition-colors"
                >
                  {sortOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.name}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                  <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 20 20" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>
              
              {/* Reset filters button */}
              <div className="min-w-fit">
                <button
                  onClick={() => {
                    setActiveCollection(null);
                    setActiveCategory(null);
                    setActiveMaterial(null);
                    setActiveGemstone(null);
                    setPriceRange([0, 10000]);
                    setPriceMin(0);
                    setPriceMax(10000);
                    setSortBy('newest');
                  }}
                  className="py-2 text-vividOrange hover:text-jetBlack transition-colors flex items-center"
                >
                  <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Reset Filters
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Products Grid */}
        <div className="w-full">
          {/* Active filters */}
          {(activeCollection || activeCategory || activeMaterial || activeGemstone || priceRange[0] > 0 || priceRange[1] < 10000) && (
            <div className="mb-6 flex flex-wrap gap-2">
              <span className="text-sm text-slateGray">Active Filters:</span>
              
              {activeCollection && collections.find(c => c._id === activeCollection) && (
                <div className="flex items-center gap-1 px-2 py-1 bg-gray-100 rounded-full text-sm">
                  <span>Collection: {collections.find(c => c._id === activeCollection)?.title}</span>
                  <button 
                    onClick={() => setActiveCollection(null)}
                    className="rounded-full w-4 h-4 flex items-center justify-center bg-gray-300 hover:bg-vividOrange hover:text-white transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>
              )}
              
              {activeCategory && categories.find(c => c._id === activeCategory) && (
                <div className="flex items-center gap-1 px-2 py-1 bg-gray-100 rounded-full text-sm">
                  <span>Category: {categories.find(c => c._id === activeCategory)?.name}</span>
                  <button 
                    onClick={() => setActiveCategory(null)}
                    className="rounded-full w-4 h-4 flex items-center justify-center bg-gray-300 hover:bg-vividOrange hover:text-white transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>
              )}
              
              {activeMaterial && materials.find(m => m._id === activeMaterial) && (
                <div className="flex items-center gap-1 px-2 py-1 bg-gray-100 rounded-full text-sm">
                  <span>Material: {materials.find(m => m._id === activeMaterial)?.name}</span>
                  <button 
                    onClick={() => setActiveMaterial(null)}
                    className="rounded-full w-4 h-4 flex items-center justify-center bg-gray-300 hover:bg-vividOrange hover:text-white transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>
              )}
              
              {activeGemstone && gemstones.find(g => g._id === activeGemstone) && (
                <div className="flex items-center gap-1 px-2 py-1 bg-gray-100 rounded-full text-sm">
                  <span>Gemstone: {gemstones.find(g => g._id === activeGemstone)?.name}</span>
                  <button 
                    onClick={() => setActiveGemstone(null)}
                    className="rounded-full w-4 h-4 flex items-center justify-center bg-gray-300 hover:bg-vividOrange hover:text-white transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>
              )}
              
              {(priceRange[0] > 0 || priceRange[1] < 10000) && (
                <div className="flex items-center gap-1 px-2 py-1 bg-gray-100 rounded-full text-sm">
                  <span>Price: ${priceRange[0]} - ${priceRange[1]}</span>
                  <button 
                    onClick={() => {
                      setPriceRange([0, 10000])
                      setPriceMin(0)
                      setPriceMax(10000)
                    }}
                    className="rounded-full w-4 h-4 flex items-center justify-center bg-gray-300 hover:bg-vividOrange hover:text-white transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>
              )}
            </div>
          )}
          
          {/* Products */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {displayProducts.map((product) => (
              <div key={product._id} className="group">
                <Link href={`/products/${product.slug.current}`}>
                  <div className="aspect-square mb-3 relative overflow-hidden bg-gray-100">
                    {/* Product badges */}
                    <div className="absolute top-2 left-2 z-10 flex flex-col gap-2">
                      {product.isNew && (
                        <span className="bg-vividOrange text-white text-xs px-2 py-1 rounded">
                          New
                        </span>
                      )}
                      {product.isBestseller && (
                        <span className="bg-jetBlack text-white text-xs px-2 py-1 rounded">
                          Bestseller
                        </span>
                      )}
                      {product.comparePrice && product.comparePrice > product.price && (
                        <span className="bg-red-500 text-white text-xs px-2 py-1 rounded">
                          Sale
                        </span>
                      )}
                    </div>
                    
                    {/* Product image */}
                    {product.images && product.images.length > 0 ? (
                      <Image 
                        src={urlForImage(product.images[0]).width(600).height(600).url()}
                        alt={product.name}
                        fill
                        className="object-cover transform group-hover:scale-105 transition-transform duration-500"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                        <span className="text-gray-400">Image coming soon</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Product info */}
                  <div>
                    <h3 className="text-lg font-medium text-jetBlack group-hover:text-vividOrange transition-colors">
                      {product.name}
                    </h3>
                    <div className="mt-2 flex items-center">
                      <p className="font-medium text-jetBlack">
                        ${product.price?.toFixed(2)}
                      </p>
                      {product.comparePrice && product.comparePrice > product.price && (
                        <p className="ml-2 text-sm text-gray-400 line-through">
                          ${product.comparePrice.toFixed(2)}
                        </p>
                      )}
                    </div>
                  </div>
                </Link>
                
                {/* Quick add to cart button */}
                <button className="mt-3 w-full py-2 bg-white border border-jetBlack text-jetBlack rounded hover:bg-jetBlack hover:text-white transition-colors">
                  Quick View
                </button>
              </div>
            ))}
          </div>
          
          {/* Loading or empty state */}
          {isLoading ? (
            <div className="text-center py-12">
              <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-vividOrange border-r-transparent"></div>
              <p className="mt-4 text-slateGray">Loading luxurious pieces...</p>
            </div>
          ) : products.length === 0 && !isLoading ? (
            <div className="text-center py-16">
              <h3 className="text-xl font-medium text-jetBlack mb-2">No products found</h3>
              <p className="text-slateGray mb-6">Try adjusting your filters or browse our other collections.</p>
              <button 
                onClick={() => {
                  setActiveCollection(null)
                  setActiveCategory(null)
                  setActiveMaterial(null)
                  setActiveGemstone(null)
                  setPriceRange([0, 10000])
                  setPriceMin(0)
                  setPriceMax(10000)
                  setSortBy('newest')
                }}
                className="px-6 py-2 bg-vividOrange text-white rounded hover:bg-opacity-90 transition-colors"
              >
                Clear All Filters
              </button>
            </div>
          ) : null}
        </div>
      </div>
    </div>
  )
}
